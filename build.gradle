import groovy.xml.MarkupBuilder

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.1.0'
    }
}

plugins {
    id 'net.nemerosa.versioning' version '2.0.0'
}


apply plugin: 'java'
apply plugin: 'scala'

static def os() {
    def system = System.getProperty("os.name", "generic").toLowerCase(Locale.ENGLISH)
    if(system.contains("nux")) return "linux"
    else if(system.contains("windows")) return "windows"
    else if(system.contains("mac")) return "macos"
    else throw new IllegalStateException("Unsupported operating system")
}

ext {
    platform = project.properties['platform'] ?: os()
}

import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))

group 'net.warpgame'

//def branch = "${System.env.GIT_BRANCH ? System.env.GIT_BRANCH : versioning.info.branch}"
//version "${branch.replace("origin/", "")}-0.1.2.${versioning.info.build}"
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    testCompile 'junit:junit:4.12'
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }
jar {
    zip64 true
    from {
        project.configurations.compile
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'net.warpgame.engine.core.runtime.EngineLauncher'
    }
    baseName = "Warp-${platform}"
}

dependencies {
    compile project(':graphicstest')
    compile group: 'org.codehaus.groovy', name: 'groovy-xml', version: '2.5.6'

}


task runEngine(type:JavaExec) {
    main = "net.warpgame.engine.core.runtime.EngineLauncher"
    classpath = sourceSets.main.runtimeClasspath
    if(project.hasProperty('cl')){
        args(cl)
    }
    jvmArgs '-Djava.system.class.loader=net.warpgame.engine.core.runtime.EngineClassLoader'
}

static def createConfiguration(taskName, mainClass, mod) {
    def runConfigurationsDir = new File(".idea/runConfigurations")
    runConfigurationsDir.mkdirs()

    def launcherClass = "net.warpgame.engine.core.runtime.EngineLauncher"
    def props = "-Djava.system.class.loader=net.warpgame.engine.core.runtime.EngineClassLoader"

    def writer = new FileWriter(new File(runConfigurationsDir, "${taskName}.xml"))
    def xml = new MarkupBuilder(writer)

    xml.component(name: "ProjectRunConfigurationManager") {
        configuration(default: 'false', name: taskName, type: "Application", factoryName: "Application", singleton: "true") {
            option(name: 'MAIN_CLASS_NAME', value: launcherClass)
            option(name: 'VM_PARAMETERS', value: props)
            option(name: 'PROGRAM_PARAMETERS', value: mainClass)
            option(name: 'WORKING_DIRECTORY', value: 'file://$PROJECT_DIR$')
            module(name: mod)
        }
    }
}

task createRunConfigurations {
    createConfiguration("SP - Vulkan Test", "net.warpgame.engine.graphicstest.GraphicsTest", "graphicstest_main")
    createConfiguration("MP - Server Test", "net.warpgame.servertest.server.ServerTest", "servertest_main")
    createConfiguration("MP - Client Test", "net.warpgame.servertest.client.ClientTest", "servertest_main")
    createConfiguration("IDE - Ai Behavior Tree Editor", "net.warpgame.ide.AiBehaviorTreeEditor", "ide_main")
}


subprojects {
    group 'net.warpgame'
    version '0.1.2'
    test {
        reports.html.enabled = false
        reports.junitXml.enabled = true
    }
}