buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.1.0'
    }
}

plugins {
    id 'net.nemerosa.versioning' version '2.0.0'
}

apply plugin: 'java'
apply plugin: 'scala'

import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))

group 'pl.warp'

def branch = "${System.env.GIT_BRANCH ? System.env.GIT_BRANCH : versioning.info.branch}"
version "${branch.replace("origin/", "")}-0.1.2.${versioning.info.build}"
repositories {
    mavenCentral()
}

def platform = project.properties['platform'] ?: "windows"

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    testCompile 'junit:junit:4.12'
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }
jar.dependsOn subprojects.tasks['classes']
jar {
    zip64 true
    from {
        project.configurations.compile
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'pl.warp.test.TestApp'
    }
    baseName = "Warp-${platform}"
}

dependencies {
    compile project(':test')
}


task runEngine(type:JavaExec) {
    main = "pl.warp.engine.core.runtime.EngineLauncher"
    classpath = sourceSets.main.runtimeClasspath
    if(project.hasProperty('cl')){
        args(cl)
    }
    jvmArgs '-Djava.system.class.loader=pl.warp.engine.core.runtime.EngineClassLoader'
}


task runTest(type:JavaExec) {
    main = "pl.warp.engine.core.runtime.EngineLauncher"
    classpath = sourceSets.main.runtimeClasspath
    args "pl.warp.test.Test1"
    jvmArgs '-Djava.system.class.loader=pl.warp.engine.core.runtime.EngineClassLoader'
}

subprojects {
    test {
        reports.junitXml.enabled = false
    }
}